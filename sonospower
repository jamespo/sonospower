#!/usr/bin/env python

import argparse
import logging
import os
import soco
import time
from powermate import PowerMate


logger = logging.getLogger(__name__)
console_handler = logging.StreamHandler()
logger.addHandler(console_handler)


def getargs():
    '''get CLI args'''
    parser = argparse.ArgumentParser(description='Control Sonos speaker')
    parser.add_argument('--lightratio', default=2.0, type=float,
                        help='how much to increase light per percent of volume')
    parser.add_argument('--dcdelta', default=1.5, type=float,
                        help='how many secs 2 clicks = doubleclick')
    return parser.parse_args()


def set_light_on_volume(lightratio):
    """increase brightness per unit of volume"""
    # maximum brightness = 255, maximum volume = 100
    # 0.392 would map but very loud for full brightness!
    powermate.set_led_solid(min(255, int(sonos.volume * lightratio)))


def on_turn(amount):
    '''wheel turned'''
    logger.debug(f'Turned: {amount}')
    global args
    sonos.volume += amount
    set_light_on_volume(args.lightratio)


def on_button(pressed):
    '''powermate button pressed or released'''
    global lastclick, args
    thisclick = time.time()
    if pressed:
        logger.debug(
            f'Button pressed - lastclick: {lastclick} - thisclick: {thisclick}'
            f' - volume: {sonos.volume}')
        if (lastclick is None) or (thisclick - lastclick > args.dcdelta):
            # single click
            status = sonos.get_current_transport_info()
            if status['current_transport_state'] == 'PLAYING':
                logger.debug('pausing')
                sonos.pause()
            else:
                logger.debug('playing')
                sonos.play()
            lastclick = thisclick
        else:
            # doubleclick - fast forward
            logger.debug('fast forward')
            sonos.next()
            sonos.play()
            lastclick = None  # reset doubleclick timer
    else:
        logger.debug('Button released')


def main():
    if os.getenv('SPDEBUG'):
        logger.setLevel(logging.DEBUG)
        logger.debug('DEBUG enabled')
    else:
        logger.setLevel(logging.INFO)
    global sonos, powermate, lastclick, args
    args = getargs()
    lastclick = None
    sonos = soco.discovery.any_soco()
    paths = PowerMate.enumerate()
    if not paths:
        logger.error('No PowerMates detected')
    elif not sonos:
        logger.error('No Sonos speakers detected')
    else:
        powermate = PowerMate(
            paths[0],
            turn_callback=on_turn,
            button_callback=on_button)
        powermate._loop.run_forever()


if __name__ == '__main__':
    main()
